# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'biblePromt.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtWidgets import *
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QTextEdit
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import os
import json
import re
class Ui_Dialog(QtWidgets.QMainWindow):
    def setupUi(self, Dialog):
        self.resize(360, 500)
        self.file_path = None #배경화면 이미지 경로
        self.lineEdit = QtWidgets.QLineEdit(self)
        self.lineEdit.setGeometry(QtCore.QRect(10, 10, 100, 30))
        self.lineEdit.setPlaceholderText("ex) 창세기")
        self.lineEdit2 = QtWidgets.QLineEdit(self)
        self.lineEdit2.setGeometry(QtCore.QRect(115, 10, 55, 30))
        self.lineEdit2.setPlaceholderText("ex) 1")
        self.lineEdit3 = QtWidgets.QLineEdit(self)
        self.lineEdit3.setGeometry(QtCore.QRect(175, 10, 55, 30))
        self.lineEdit3.setPlaceholderText("ex) 1")
        settings = self.loadSettings()
        self.pushButton = QtWidgets.QPushButton("검색", self)
        self.pushButton.setGeometry(QtCore.QRect(280, 10, 70, 30))
        self.pushButton.clicked.connect(self.on_search_clicked)
        
        self.listView = QtWidgets.QListWidget(self)
        self.listView.setGeometry(QtCore.QRect(10, 50, 150, 131))
        self.listView.clicked.connect(self.on_item_clicked)

        self.moveToFavButton = QtWidgets.QPushButton("즐찾", self)
        self.moveToFavButton.setGeometry(QtCore.QRect(160, 100, 40, 30))
        self.moveToFavButton.clicked.connect(self.on_move_clicked)

        self.favView = QtWidgets.QListWidget(self)
        self.favView.setGeometry(QtCore.QRect(200, 50, 150, 130))
        self.favView.clicked.connect(self.on_fav_item_clicked)
        self.favView.doubleClicked.connect(self.on_fav_item_double_clicked)

        self.comboBox = QtWidgets.QComboBox(self)
        self.comboBox.setGeometry(QtCore.QRect(90, 340, 260, 20))
        self.showLbl = QtWidgets.QLabel("출력 모니터", self)
        self.showLbl.setGeometry(QtCore.QRect(10, 340, 70, 20))
        self.bibleContentEdit = QtWidgets.QPlainTextEdit(self)
        self.bibleContentEdit.setGeometry(QtCore.QRect(10, 180, 340, 100))

        self.uploadButton = QtWidgets.QPushButton("배경화면 변경", self)
        self.uploadButton.setGeometry(QtCore.QRect(10, 365, 120, 20))
        self.uploadButton.clicked.connect(self.on_upload_clicked)

        self.titleColor = settings["titleColor"] or "#000000"
        self.fontLabel = QtWidgets.QLabel(self)
        self.fontLabel.setText("장 색상")
        
        self.fontLabel.setGeometry(QtCore.QRect(130, 365, 120, 20))

        self.contentColor = settings["contentColor"] or "#000000"
        self.contentLabel = QtWidgets.QLabel(self)
        self.contentLabel.setText("절 색상")


        self.contentLabel.setGeometry(QtCore.QRect(190, 365, 120, 20))

        self.colorBox = QtWidgets.QPushButton(self)
        self.colorBox.setText("")
        self.colorBox.setGeometry(QtCore.QRect(170, 365, 20, 20))
        self.colorBox.setStyleSheet("background-color: " + self.titleColor + ";")
        self.colorBox.clicked.connect(self.on_title_color_clicked)

        self.contentColorBox = QtWidgets.QPushButton(self)
        self.contentColorBox.setText("")
        self.contentColorBox.setGeometry(QtCore.QRect(230, 365, 20, 20))
        self.contentColorBox.setStyleSheet("background-color: " + self.contentColor + ";")
        self.contentColorBox.clicked.connect(self.on_content_color_clicked)

        self.sortComboBox = QtWidgets.QComboBox(self)
        self.sortComboBox.setGeometry(QtCore.QRect(260, 365, 80, 20))
        self.sortComboBox.addItem("왼쪽정렬")
        self.sortComboBox.addItem("가운데정렬")
        self.sortComboBox.addItem("오른쪽정렬")
        self.sortComboBox.setCurrentText(settings["sortDirection"])
        # self.widthSize = QtWidgets.QLineEdit(Dialog)
        # self.widthSize.setText("1920")
        # self.widthSize.setGeometry(QtCore.QRect(90, 365, 40, 20))

        # self.heightSize = QtWidgets.QLineEdit(Dialog)
        # self.heightSize.setText("1080")
        # self.heightSize.setGeometry(QtCore.QRect(140, 365, 40, 20))

        # self.fullCheck = QtWidgets.QCheckBox(Dialog)
        # self.fullCheck.setText("확대해서 보기")
        # self.fullCheck.setGeometry(QtCore.QRect(185, 365, 110, 20))

        self.fontLbl = QtWidgets.QLabel(self)
        self.fontLbl.setGeometry(QtCore.QRect(10, 395, 50, 20))
        self.fontLbl.setText("글씨 크기")

        self.titleFontLbl = QtWidgets.QLabel(self)
        self.titleFontLbl.setGeometry(QtCore.QRect(90, 395, 20, 20))
        self.titleFontLbl.setText("장")

        self.titleFontSize = QtWidgets.QLineEdit(self)
        self.titleFontSize.setGeometry(QtCore.QRect(110, 395, 30, 20))
        
        self.titleFontSize.setText(settings["titleFontSize"])

        self.subFontLbl = QtWidgets.QLabel(self)
        self.subFontLbl.setGeometry(QtCore.QRect(150, 395, 20, 20))
        self.subFontLbl.setText("절")

        self.subFontSize = QtWidgets.QLineEdit(self)
        self.subFontSize.setGeometry(QtCore.QRect(170, 395, 30, 20))
        self.subFontSize.setText(settings["subFontSize"])

        self.fontLbl = QtWidgets.QLabel(self)
        self.fontLbl.setGeometry(QtCore.QRect(210, 395, 30, 20))
        self.fontLbl.setText("폰트")

        self.fontComboBox = QtWidgets.QComboBox(self)
        self.fontFamilies = QFontDatabase().families()
        self.fontComboBox.addItems(self.fontFamilies)
        self.fontComboBox.setEditable(True)
        # Dont Add the new values to combobox
        self.fontComboBox.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
        # Autocompleting
        self.fontComboBox.completer().setCompletionMode(QtWidgets.QCompleter.PopupCompletion)
        self.fontComboBox.setGeometry(QtCore.QRect(240, 395, 100, 20))
        self.fontComboBox.setCurrentText(settings["fontFamily"])

        self.showButton = QtWidgets.QPushButton("모니터에 출력하기", self)
        self.showButton.setGeometry(QtCore.QRect(10, 420, 340, 30))
        self.showButton.clicked.connect(self.on_show_clicked)
        self.pushButton_3 = QtWidgets.QPushButton("이전 구절", self)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 300, 170, 30))
        self.pushButton_3.clicked.connect(self.on_prev_clicked)

        self.pushButton_4 = QtWidgets.QPushButton("다음 구절", self)
        self.pushButton_4.setGeometry(QtCore.QRect(180, 300, 170, 30))
        self.pushButton_4.clicked.connect(self.on_next_clicked)

        self.publisher = QtWidgets.QLabel(self)
        self.publisher.setGeometry(QtCore.QRect(10, 450, 340, 30))
        self.publisher.setText("개발자 연락처 : coolguysiun@naver.com")

        self.window = None
        #self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)
    def read(self):
        file_path = self.resource_path('public/bible.json')
        with open(file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
            return data
        
    def resource_path(self, relative_path):
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")

        return os.path.join(base_path, relative_path)
    def setBibleContext(self, bible):
        self.bibleContents = bible

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate 
        Dialog.setWindowTitle(_translate("Dialog", "성경말씀 프롬프트"))
        Dialog.setWindowIcon(QtGui.QIcon(self.resource_path('public/bible.png')))
        self.pushButton.setText(_translate("Dialog", "검색"))
        self.showLbl.setText(_translate("Dialog", "출력 모니터"))
        self.showButton.setText(_translate("Dialog", "모니터에 출력하기"))
        self.pushButton_3.setText(_translate("Dialog", "이전 구절"))
        self.pushButton_4.setText(_translate("Dialog", "다음 구절"))
        self.moveToFavButton.setText(_translate("Dialog", "즐찾"))

    def on_search_clicked(self):
        verse =self.lineEdit.text() #검색어
        jang = self.lineEdit2.text()
        jul = self.lineEdit3.text()
        inputs = [verse, jang, jul]
        matched_verses = self.search_verses(inputs)
        self.addToList(matched_verses)

    def on_upload_clicked(self):
        file_path = QFileDialog.getOpenFileName(self, 'Open file', 'c:\\', "Image files (*.jpg *.png)")
        if file_path[0]:
            self.file_path = file_path[0]

    def on_item_clicked(self,index):
        item_text = index.data(Qt.DisplayRole)
        self.bibleContentEdit.setPlainText(self.bibleContents[item_text])
        self.favView.selectionModel().clearSelection()

    def on_fav_item_clicked(self, index): #즐찾 목록을 선택 시 검색 목록 선택 이벤트와 동일하게 동작합니다.
        item_text = index.data(Qt.DisplayRole)
        self.bibleContentEdit.setPlainText(self.bibleContents[item_text])
        self.listView.selectionModel().clearSelection()
        find_index = 0
        for index in range(self.listView.count()):
            item = self.listView.item(index)
            if item.text() == item_text:
                find_index = index
                break

        self.listView.setCurrentRow(find_index)

    def on_title_color_clicked(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.titleColor = color.name()
            self.colorBox.setStyleSheet("background-color: " + self.titleColor + ";")

    def on_content_color_clicked(self):
        color = QColorDialog.getColor()
        if color.isValid():
            self.contentColor = color.name()
            self.contentColorBox.setStyleSheet("background-color: " + self.contentColor + ";")

    def on_fav_item_double_clicked(self, index): #더블 클릭시 즐찾 목록에서 제거합니다.
        selected_item = self.favView.currentItem()
        if selected_item is not None:
            # 아이템 제거
            row = self.favView.row(selected_item)
            self.favView.takeItem(row)
    def on_move_clicked(self):
        current_index = self.listView.currentIndex()
        item_text = current_index.data()
        list_item = QtWidgets.QListWidgetItem(current_index.data())

        for index in range(self.favView.count()): #즐찾 목록에 중복 요소가 존재하면 추가하지 않습니다.
            item = self.favView.item(index)
            if item.text() == item_text:
                return

        self.favView.addItem(list_item)

    def addToList(self, bibleJson):
        self.listView.clear()
        if len(bibleJson)>0:
            for i in bibleJson:
                item = QtWidgets.QListWidgetItem(i)
                self.listView.addItem(item)

    def get_display_info(self,app):
        # 모든 활성화된 스크린 정보 가져오기
        screens = app.screens()

        display_info = []

        for i, screen in enumerate(screens):
            screen_info = {
                'Screen': i + 1,
                'Geometry': screen.geometry(),
                'Available Geometry': screen.availableGeometry(),
                'Physical Size': screen.physicalSize(),
                'Logical DPI': screen.logicalDotsPerInch(),
                'Physical DPI': screen.physicalDotsPerInch(),
            }
            display_info.append(screen_info)

        return display_info

    def set_display_info(self,screens):
        self.comboBox.addItems(screens)
    def on_show_clicked(self):
        screen_index = self.comboBox.currentIndex()
        screen_geometry = QtWidgets.QDesktopWidget().screenGeometry(screen_index)
        selected_indexes = self.listView.selectedIndexes()
        if selected_indexes:
            title = selected_indexes[0].data()
            self.selected_index = list(self.bibleContents.keys()).index(title)
            if self.window != None :
                self.window.updateContent(title, self.bibleContentEdit.toPlainText())
            else:
                self.window = FullScreenWindow(
                    self,
                    self.titleFontSize.text(), 
                    self.subFontSize.text(), 
                    self.fontComboBox.currentText(),
                    screen_index=screen_index, 
                    title=title, 
                    content=self.bibleContentEdit.toPlainText(),
                    titleColor=self.titleColor,
                    contentColor=self.contentColor,
                    sortDirection=self.sortComboBox.currentText(),
                    img_path= self.file_path
                    )

                self.window.setGeometry(screen_geometry)
                #self.window.showFullScreen()
                self.window.show()

    def on_prev_clicked(self):
        if self.window == None:
            current_index = self.listView.currentIndex()
            prev_index = current_index.siblingAtColumn(0).siblingAtRow(current_index.row() - 1)

            if prev_index.isValid():
                # 이전 인덱스 선택
                self.listView.selectionModel().clearSelection()
                self.listView.selectionModel().setCurrentIndex(prev_index, QItemSelectionModel.Select)
                self.on_item_clicked(prev_index)
        else:
            if self.selected_index:
                prev_index = self.selected_index - 1
                if prev_index >= 0:
                    keys_list = list(self.bibleContents.keys())
                    prev_key = keys_list[prev_index]
                    self.window.updateContent(prev_key, self.bibleContents[prev_key])
                    self.selected_index = prev_index
            else:
                current_index = self.listView.currentIndex()
                prev_index = current_index.siblingAtColumn(0).siblingAtRow(current_index.row() - 1)
                
                if prev_index.isValid():
                    # 이전 인덱스 선택
                    self.listView.selectionModel().clearSelection()
                    self.listView.selectionModel().setCurrentIndex(prev_index, QItemSelectionModel.Select)
                    keys_list = list(self.bibleContents.keys())
                    prev_key = keys_list[prev_index.row()]
                    self.window.updateContent(prev_key, self.bibleContents[prev_key])
                    self.selected_indexes = [prev_index]


    def on_next_clicked(self):
        if self.window == None:
            current_index = self.listView.currentIndex()
            next_index = current_index.siblingAtColumn(0).siblingAtRow(current_index.row() + 1)
            if next_index.isValid():
                # 이전 인덱스 선택
                self.listView.selectionModel().clearSelection()
                self.listView.selectionModel().setCurrentIndex(next_index, QItemSelectionModel.Select)
                self.on_item_clicked(next_index)

        else:
            if self.selected_index:
                next_index = self.selected_index + 1
                if next_index < len(self.bibleContents):
                    keys_list = list(self.bibleContents.keys())
                    next_key = keys_list[next_index]
                    self.window.updateContent(next_key, self.bibleContents[next_key])
                    self.selected_index = next_index
            else:
                current_index = self.listView.currentIndex()
                next_index = current_index.siblingAtColumn(0).siblingAtRow(current_index.row() + 1)
                if next_index.isValid():
                    self.listView.selectionModel().clearSelection()
                    self.listView.selectionModel().setCurrentIndex(next_index, QItemSelectionModel.Select)
                    keys_list = list(self.bibleContents.keys())
                    
                    print(self.listView.selectionModel().currentIndex().data())
                    next_key = keys_list[next_index.row()]
                    title = self.listView.selectionModel().currentIndex().data()
                    self.window.updateContent(title, self.bibleContents[title]) #모니터에 출력되어 있는 내용을 수정합니다.
                    self.selected_indexes = [next_index]

    def search_verses(self, inputs):
        print(inputs)
        results = {}
        for key, value in self.bibleContents.items():
            parts = key.split()
            if all(inp in part for inp, part in zip(inputs, parts)):
                results[key] = value
        return results

    def loadSettings(self):
        settings = QtCore.QSettings("BiblePrompt", "BiblePrompt")
        titleFontSize = settings.value("titleFontSize", "70")
        subFontSize = settings.value("subFontSize", "50")
        titleColor = settings.value("titleColor", "#000000")
        contentColor = settings.value("contentColor", "#000000")
        sortDirection = settings.value("sortDirection", "가운데정렬")

        return {
            "titleFontSize": titleFontSize,
            "subFontSize": subFontSize,
            "fontFamily": settings.value("fontFamily", "맑은 고딕"),
            "titleColor": titleColor,
            "contentColor": contentColor,
            "sortDirection": sortDirection
        }

    def closeEvent(self, event):
        print("closed")
        settings = QtCore.QSettings("BiblePrompt", "BiblePrompt")
        settings.setValue("titleFontSize", self.titleFontSize.text())
        settings.setValue("subFontSize", self.subFontSize.text())
        settings.setValue("fontFamily", self.fontComboBox.currentText())
        settings.setValue("titleColor", self.titleColor)
        settings.setValue("contentColor", self.contentColor)
        settings.setValue("sortDirection", self.sortComboBox.currentText())

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()
        elif event.key() == Qt.Key_Return:
            self.on_search_clicked()
        elif event.key() == Qt.Key_F5:
            self.on_show_clicked()
    

class FullScreenWindow(QtWidgets.QMainWindow):
    def __init__(self, parent, titleFontSize, subFontSize, font_, screen_index=0,title="", content="", titleColor="#000000", contentColor="#000000", 
                sortDirection="가운데정렬", img_path=None):
        super(FullScreenWindow, self).__init__()
        self.parent = parent
        self.screen_index = screen_index
        self.initUI(titleFontSize, subFontSize, font_, title, content, titleColor, contentColor,sortDirection, img_path)
    def initUI(self, titleFontSize, subFontSize, font_, title, content, titleColor, contentColor,sortDirection, img_path):
        self.setWindowTitle('Full Screen Presentation')
        # QLabel을 사용하여 전체 화면에 텍스트를 표시
        current_dir = os.path.dirname(os.path.abspath(__file__))
        print(current_dir)
        # 이미지 파일의 상대 경로
        image_relative_path = 'public/bg.jpg'
        image_absolute_path = os.path.join(current_dir, image_relative_path).replace("\\", "/") if img_path is None else img_path
        
        app = QApplication.instance()
        screen = app.primaryScreen()
        geometry = screen.availableGeometry()
        # QPixmap 객체 생성
        pixmap = QtGui.QPixmap(image_absolute_path)
        scaled_pixmap = pixmap.scaled(geometry.width(), geometry.height()+100)
        qp = QPalette()
        qp.setBrush(QPalette.Background, QBrush(scaled_pixmap))
        self.setPalette(qp)

        self.titleLbl =QtWidgets.QLabel(re.sub(r"(\d) (\d)", r"\1 : \2", title), self)
        font = QFont(font_)
        font.setPointSize(int(titleFontSize))
        self.titleLbl.setFont(font)
        self.titleLbl.setStyleSheet('color:'+titleColor+';'+ 'margin-bottom: 15px;')

        if sortDirection == "왼쪽정렬":
            self.titleLbl.setAlignment(Qt.AlignLeft)
        elif sortDirection == "오른쪽정렬":
            self.titleLbl.setAlignment(Qt.AlignRight)
        else:
            self.titleLbl.setAlignment(Qt.AlignCenter)
        self.contentLbl = QtWidgets.QLabel(content, self)
        font = QFont(font_)
        font.setPointSize(int(subFontSize))
        self.contentLbl.setFont(font)
        self.contentLbl.setStyleSheet('color:' + contentColor+';margin-top: 5px; margin-left:20px; margin-right:20px;')
        self.contentLbl.setWordWrap(True)
        if sortDirection == "왼쪽정렬":
            self.contentLbl.setAlignment(Qt.AlignLeft)
        elif sortDirection == "오른쪽정렬":
            self.contentLbl.setAlignment(Qt.AlignRight)
        else:
            self.contentLbl.setAlignment(Qt.AlignCenter)

        # QVBoxLayout을 사용하여 위젯들을 배치
        layout = QtWidgets.QVBoxLayout()
        layout.addStretch()
        layout.addWidget(self.titleLbl)
        layout.addWidget(self.contentLbl)
        layout.addStretch()

        # QVBoxLayout의 margin 없애기

        # QWidget을 사용하여 위젯들을 감싸고, 윈도우의 중앙에 위치시킴
        self.central_widget = QtWidgets.QWidget()
        self.central_widget.setLayout(layout)
        self.setCentralWidget(self.central_widget)
        # QLabel을 전체 화면으로 표시

    def updateContent(self, title, content):
        self.titleLbl.setText(re.sub(r"(\d) (\d)", r"\1 : \2", title))
        self.contentLbl.setText(content)


    def keyPressEvent(self, event):
        # ESC 키를 눌렀을 때 윈도우를 닫음
        print(event.key())
        if event.key() == Qt.Key_Escape:
            self.close()
        elif event.key() == Qt.Key_Left:
            self.parent.on_prev_clicked()
        elif event.key() == Qt.Key_Right:
            self.parent.on_next_clicked()

    def getTitle(self):
        return self.titleLbl.text()

    def closeEvent(self, a0):
        self.parent.window = None
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    bible = ui.read()
    ui.setBibleContext(bible)
    ui.addToList(bible)
    screens = ui.get_display_info(app)
    screen_numbers = []
    for i in range(len(screens)):
        screen_numbers.append('Screen' + str(i+1))
    ui.set_display_info(screen_numbers)

    ui.show()
    sys.exit(app.exec_())
